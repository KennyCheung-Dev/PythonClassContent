# -------------------------------------------------------

# 考试规则

# 考试时常为 1.5 小时
# 考试题目会在开课前5分钟发到大家的邮箱里，考生需要预先下载好
# 考试时限到 考生需要把答案 分题目 全部发到zoom聊天

# 可以上网查找 python语言的工具
# 考生之间不可以沟通


# -------------------------------------------------------

# CCC 2018 J1 - Telemarketer or not?

# 在 Concerned Citizens of Commerce (CCC)
# 电话销售人员喜欢使用 后四位数有三种特质的 七位数电话号码
# - 后四位数 第一个号码 一定是 8 或 9
# - 后四位数 最后一个号码 一定是 8 或 9
# - 后四位数 第二和第三个个号码 一定是一样的数字
# 后四位数 例子： 8229, 8338, 9008

# 写一个程序，检查号码是否电话销售人员，并告诉用户应不应该
# 拒绝接听（ignore） 或者
# 急停（answer）

# 输入:
# 四行 分别是 电话号码后四位数
# 9
# 6
# 6
# 8

# 输出：
# ignore


# 输入:
# 四行 分别是 电话号码后四位数
# 5
# 6
# 6
# 8

# 输出：
# answer

# -------------------------------------------------------

# J1 答案

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# if a == 9 or a == 8 and d == 9 or d == 8 and c == d:
#     print("ignore")
# else:
#     print("answer")

# -------------------------------------------------------

# CCC 2018 J2 - Occupy parking

# 一个停车场管理员
# 记录下来昨天跟今天的 停车情况
# 需要查看 哪一些位置 昨天跟今天都被有被停过

# 输入：
# 第一行是一个整数N (1 <= N <= 100)
# 第二和第三行有N位数据
# 第一行是停车位的数量
# 第二行是昨天的停车情况， 用[ . ]代表没有停车， 用[ C ]代表有 停车
# 输出：
# 一个整数，多少位置 昨天和今天都有停车

# 输入:
# 5
# CC..C
# .CC..

# 输出：
# 1

# 解释：
# 只有第二个位置两天都被停下了

# 输入：
# 7
# CCCCCCC
# C.C.C.C

# 输出：
# 4

# 解释：
# 第一，第三，第五，第七位置 昨天和今天都有被停下

# -------------------------------------------------------

# J2 答案

# total = 0
# n = int(input())
# day1 = input()
# day2 = input()
# for i in range(n):
#     if day1[i] == "C" and day2[i] == "C":
#         total += 1
# print(total)

# -------------------------------------------------------

# CCC 2018 J3 - GPS Text Entry

# Sandy在用一台GPS
# 这台GPS有上下左右按键 和中间的一个确认按键
# 操控方法是 要把指标移动到想要输入的英文字母上 并按确认
# 句子输入完结之后 需要移动到"Enter"上 按 确认
# 指标初始位置为A
#
# 如果想从 A键 移动到 I键 并按下需要按 下，右，右
# 如果要打完 GPS 这个字符 需要按15次，

# 请找出完整打完 提供的字符 需要按的方向按键数量
# 注意 - 只需要算方向按键

# 例子：

# 输入：
# GPS

# 输出：
# 15

# 解释：
# A到G按下： 1
# G到P按下： 4
# P到S按下： 4
# S到Enter按下： 6
# 总数15方向键

# 输入：
# ECHO ROCK

# 输出：
# 29

#--------------------------------------------------------

# J3 答案


steps = [[0,0]]
total = 0
keys = [
    ["A", "B", "C", "D", "E", "F"],
    ["G", "H", "I", "J", "K", "L"],
    ["M", "N", "O", "P", "Q", "R"],
    ["S", "T", "U", "V", "W", "X"],
    ["Y", "Z", " ", "-", ".", "enter"]
]

word = input()

for letter in word:
    for i in range(len(keys)):
        for j in range(len(keys[i])):
            if keys[i][j] == letter:
                steps.append([i,j])
steps.append([4,5])

# print(steps)

for i in range(1, len(steps)):
    total += abs(steps[i][0] - steps[i-1][0])
    total += abs(steps[i][1] - steps[i-1][1])
print(total)

#--------------------------------------------------------











