# 作业

# 返回列表所有值的和
# 如果列表是空的 返回0
# 数字13 为特别的，13本身和13后面的数字 不加进和
# sum13([1, 2, 2, 1])  -> 6
# sum13([1, 2, 2, 1, 13]) -> 6
# sum13([1, 2, 2, 1, 13, 2]) -> 6
# sum13([1, 2, 2, 1, 13, 2, 1]) -> 7
# sum13([1, 2, 2, 1, 13, 13, 2, 6]) -> 12

# 答案
def sum13(li):
    之前的数字 = 0
    和=0
    for 数字 in li:  # i = 列表里面的元素
        if not 数字 == 13 and not 之前的数字 == 13:
            和 += 数字
        之前的数字 = 数字
    return 和

print(    sum13([1, 2, 2, 1, 13, 13, 2, 6])    )

# 答案
# def sum13(li):
#     sum = 0
#     skipNext = False
#     for num in li:
#         if num == 13:
#             skipNext = True
#         else:
#             if not skipNext:
#                 sum += num
#             else:
#                 skipNext = False
#     return sum

# print(sum13([1, 2, 2, 1, 13, 13, 2]))

#-------------------------------------------------------------------------

# CCC 2000 J3: Slot Machine 老虎机

# 有三台老虎机 a，b，c
# 初始币 有 x  （呼叫的时候 会提供)
# a 每35轮 给30币
# b 每100轮 给60币
# c 每10轮 给9币

# 我们 三台 轮流玩  abcabcababcabc 这样一直玩下去

# 并且
# 老虎机有 上一手被玩过的次数 提供  d，e，f

# 要求： 算出 我们总共能玩多少币 才输的一干二净

# 输入+输出：
# 你有多少个硬币？
# 48
# 第一台机被 上一手 （不是你）玩过多少次
# 3
# 第二台机被 上一手 （不是你）玩过多少次
# 10
# 第三台机被 上一手 （不是你）玩过多少次
# 4
# （答案）你能再玩66次




#-------------------------------------------------------------------------

# 2007 J3

# 一号到十号箱子分别有
# $100, $500, $1,000, $5,000, $10,000, $25,000,
# $50,000, $100,000, $500,000, $1,000,000
# 一些箱子会被抽走

# 一部分箱子被拿走之后，银行会提出交易，用一定价钱购买你的箱子Deal or No Deal?
# 程序帮助玩家决定Deal or No Deal，
# 我们知道已经拿走和剩下的箱子的面值
# 我们知道银行给我们的offer

# 如果价钱高于平均值, 交易
# 其他情况 不交易

#Input:
# 拿走了多少个箱子
# 拿走的箱子
# offer
'''
2      <-  被拿走的箱子的数量
3      <-  第一个箱子的号码
8      <-  第二个箱子的号码
198000
'''
# 以上数据显示
# 拿走了两个箱子
# 3号和8号
# 银行offer 198000

# Ouput:
'''
No Deal
'''
# 剩下的箱子是1，2，4，5，6，7，9，10
# 平均值 198,825 比offer高
# 所以No Deal

'''
8
10
9
8
7
6
5
4
3
400
'''

"Deal"
# 八个箱子 剩下两个
# 平均 （100 + 500）/ 2 = 300
# Offer 400
# Deal

#-------------------------------------------------------------------------

# 2015 J2

# 透过信息表情判断心情
# :-)   = happy
# :-(   = sad

# 如果:-)表情比较多 那就是print happy
# :-(  =  print sad

# 一条信息可以有很多个表情
# 算表情的数量来决定
# 如果 :-(  多于  :-) 数量   那就是print  sad
# 如果数量一样的话  print   unsure
# 如果没有表情的话  print   none

# 技巧提示：
# msg = "This:-(is str:-(:-(ange te:-)xt."   :-)
# if msg[0:3]  ==  ":-)":

# msg[1:4]
# msg[2:5]

# for i in range(文字的长度）：    《-文字长度未必一定可以直接用  有可能要改
#     msg[i:i+2]

# 例子：
# How are you :-) doing :-) today :-)?
# happy

# :)
# none

# This:-(is str:-(:-(ange te:-)xt.
# sad


#---------------------------------------------------------------------------------------------------
# 音乐播放器 只能容纳 5首曲子
# ["A", "B", "C", "D", "E"]
#按键1：
# 把第一首 换到最后
#按键2：
# 把最后一首 换到头
#按键3：
# 把头两首曲子 互换
#按键4：
# 输出歌单

# 输入：
# 按键： 2
# 次数： 5
# 按键： 2
# 次数： 1
# 按键： 4
# 次数： n
# Ouput:
# B C D A E

# 两种方法 一种是用列表 一种是用文字格式

# li = ["A", "B", "C", "D", "E"]
li = "ABCDE"

def Button1(times):
    global li
    for i in range(times):
        li = li[1:] + li[0]

def Button2(times):
    global li
    for i in range(times):
        li = li[-1] + li[0:-1]

def Button3(times):
    global li
    for i in range(times):
        li = li[1] + li[0] + li[2:]

def Button4():
    for song in li:
        print(song, end=" ")

while True:
    a = int(input("按键？"))
    b = int(input("次数？"))
    if a == 1:
        Button1(b)
    if a == 2:
        Button2(b)
    if a == 3:
        Button3(b)
    if a == 4:
        Button4()
        break



# B C D A E
# ['b', 'c'  XXXXX

# -------------------------------------------------------------
# CCC 2011 J3

# Sumac Sequence

# 作业：
# 120 71，49，22，27
# t(n) = t(n-2) - t(n-1)

# -8 -12 4 -16 20 -4 24 -28 52

# 提供的条件：
# 提供了 头两个数字
# 把剩下的数字都写出来

# 停止的条件：
# 数列结束在 t(n) if t(n-1) < t(n)

# 输出 不限制 只要把数列 完整的print出来 就好了


#







